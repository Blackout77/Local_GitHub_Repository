// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2130.MockBoard;
    
import edu.wpi.first.wpilibj.*;
 import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
import edu.wpi.first.wpilibj.Encoder.*;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveTrainLeftSideQuadratureEncoder;
    public static SpeedController driveTrainLeftDriveTalons;
    public static PIDController driveTrainLeftDrivePIDController;
    public static Encoder driveTrainRightSideQuadratureEncoder;
    public static SpeedController driveTrainRightDriveTalons;
    public static PIDController driveTrainRightDrivePIDController;
    public static Servo cameraSubsystemYCameraServo;
    public static AnalogChannel cannonElevationPIDSubsystemAnalogInputAbsolute;
    public static SpeedController cannonElevationPIDSubsystemWindowMotorCannonElevation;
    public static DigitalInput cannonElevationPIDSubsystemoutsideProx;
    public static DigitalInput cannonElevationPIDSubsystemInsideProx;
    public static Encoder cannonWheelPIDSubsystemQuadratureEncoderForPID;
    public static SpeedController cannonWheelPIDSubsystemCannonWheelTalon;
    public static DigitalInput proximitySubsystemfeederProxDigitalInput;
    public static Relay proximitySubsystemfeederWindowMotorSpike;
    public static SpeedController proximitySubsystemfrisbeeRetrievalTalon;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static RobotDrive driveTrainRobotDrive;
    public static Encoder sensorsquadEncoderSensor;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftSideQuadratureEncoder = new Encoder(1, 5, 1, 6, true, CounterBase.EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "LeftSideQuadratureEncoder", driveTrainLeftSideQuadratureEncoder);
        driveTrainLeftSideQuadratureEncoder.setDistancePerPulse(0.070012636);
        driveTrainLeftSideQuadratureEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        driveTrainLeftSideQuadratureEncoder.start();
        driveTrainLeftDriveTalons = new Talon(1, 9);
	LiveWindow.addActuator("DriveTrain", "LeftDriveTalons", (Talon) driveTrainLeftDriveTalons);
        
        driveTrainLeftDrivePIDController = new PIDController(0.016, 0.0, 0.0, 0.0, driveTrainLeftSideQuadratureEncoder, driveTrainLeftDriveTalons, 0.02);
	LiveWindow.addActuator("DriveTrain", "LeftDrivePIDController", driveTrainLeftDrivePIDController);
        driveTrainLeftDrivePIDController.setContinuous(false); driveTrainLeftDrivePIDController.setAbsoluteTolerance(6.0); 
        driveTrainLeftDrivePIDController.setOutputRange(-1.0, 1.0);        
        driveTrainRightSideQuadratureEncoder = new Encoder(1, 8, 1, 9, false, CounterBase.EncodingType.k4X);
	LiveWindow.addSensor("DriveTrain", "RightSideQuadratureEncoder", driveTrainRightSideQuadratureEncoder);
        driveTrainRightSideQuadratureEncoder.setDistancePerPulse(0.070012636);
        driveTrainRightSideQuadratureEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        driveTrainRightSideQuadratureEncoder.start();
        driveTrainRightDriveTalons = new Talon(1, 10);
	LiveWindow.addActuator("DriveTrain", "RightDriveTalons", (Talon) driveTrainRightDriveTalons);
        
        driveTrainRightDrivePIDController = new PIDController(0.016, 0.0, 0.0, 0.0, driveTrainRightSideQuadratureEncoder, driveTrainRightDriveTalons, 0.02);
	LiveWindow.addActuator("DriveTrain", "RightDrivePIDController", driveTrainRightDrivePIDController);
        driveTrainRightDrivePIDController.setContinuous(false); driveTrainRightDrivePIDController.setAbsoluteTolerance(6.0); 
        driveTrainRightDrivePIDController.setOutputRange(-1.0, 1.0);        
        cameraSubsystemYCameraServo = new Servo(1, 8);
	LiveWindow.addActuator("CameraSubsystem", "YCameraServo", cameraSubsystemYCameraServo);
        
        cannonElevationPIDSubsystemAnalogInputAbsolute = new AnalogChannel(1, 4);
	LiveWindow.addSensor("CannonElevationPIDSubsystem", "AnalogInputAbsolute", cannonElevationPIDSubsystemAnalogInputAbsolute);
        
        cannonElevationPIDSubsystemWindowMotorCannonElevation = new Talon(1, 2);
	LiveWindow.addActuator("CannonElevationPIDSubsystem", "WindowMotorCannonElevation", (Talon) cannonElevationPIDSubsystemWindowMotorCannonElevation);
        
        cannonElevationPIDSubsystemoutsideProx = new DigitalInput(1, 4);
	LiveWindow.addSensor("CannonElevationPIDSubsystem", "outsideProx", cannonElevationPIDSubsystemoutsideProx);
        
        cannonElevationPIDSubsystemInsideProx = new DigitalInput(1, 2);
	LiveWindow.addSensor("CannonElevationPIDSubsystem", "InsideProx", cannonElevationPIDSubsystemInsideProx);
        
        cannonWheelPIDSubsystemQuadratureEncoderForPID = new Encoder(1, 11, 1, 12, true, CounterBase.EncodingType.k1X);
	LiveWindow.addSensor("CannonWheelPIDSubsystem", "QuadratureEncoderForPID", cannonWheelPIDSubsystemQuadratureEncoderForPID);
        cannonWheelPIDSubsystemQuadratureEncoderForPID.setDistancePerPulse(1.0);
        cannonWheelPIDSubsystemQuadratureEncoderForPID.setPIDSourceParameter(PIDSourceParameter.kRate);
        cannonWheelPIDSubsystemQuadratureEncoderForPID.start();
        cannonWheelPIDSubsystemCannonWheelTalon = new Talon(1, 4);
	LiveWindow.addActuator("CannonWheelPIDSubsystem", "CannonWheelTalon", (Talon) cannonWheelPIDSubsystemCannonWheelTalon);
        
        proximitySubsystemfeederProxDigitalInput = new DigitalInput(1, 3);
	LiveWindow.addSensor("ProximitySubsystem", "feederProxDigitalInput", proximitySubsystemfeederProxDigitalInput);
        
        proximitySubsystemfeederWindowMotorSpike = new Relay(1, 1);
	LiveWindow.addActuator("ProximitySubsystem", "feederWindowMotorSpike", proximitySubsystemfeederWindowMotorSpike);
        
        proximitySubsystemfrisbeeRetrievalTalon = new Talon(1, 3);
	LiveWindow.addActuator("ProximitySubsystem", "frisbeeRetrievalTalon", (Talon) proximitySubsystemfrisbeeRetrievalTalon);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftDriveTalons, driveTrainRightDriveTalons);
    }
}
