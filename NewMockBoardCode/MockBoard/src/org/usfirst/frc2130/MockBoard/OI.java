// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2130.MockBoard;
import org.usfirst.frc2130.MockBoard.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton reverseFrisbeeRetrievalButton;
    public Joystick driveStick1;
    public JoystickButton runFeederButton;
    public JoystickButton runShooterWheelButton;
    public JoystickButton elevationPIDSetpointTopButton;
    public JoystickButton elevationPIDSetpointStowButton;
    public JoystickButton elevationPIDSetpointShootButton;
    public JoystickButton toggleFreeModeElevationButton;
    public JoystickButton runSlowCannonPyramidButton;
    public Joystick gameController;
    public JoystickButton fowardFrisbeeRetrievalButton;
    public Joystick driveStick2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveStick2 = new Joystick(3);
        
        fowardFrisbeeRetrievalButton = new JoystickButton(driveStick2, 1);
        fowardFrisbeeRetrievalButton.whileHeld(new ProtectedRetrievalCommand());
        gameController = new Joystick(2);
        
        runSlowCannonPyramidButton = new JoystickButton(gameController, 8);
        runSlowCannonPyramidButton.whileHeld(new SlowPyramidShotCommand());
        toggleFreeModeElevationButton = new JoystickButton(gameController, 3);
        toggleFreeModeElevationButton.whenReleased(new ToggleFreeModeElevationCommand());
        elevationPIDSetpointShootButton = new JoystickButton(gameController, 2);
        elevationPIDSetpointShootButton.whenReleased(new ElevationPIDSetpointShoot());
        elevationPIDSetpointStowButton = new JoystickButton(gameController, 1);
        elevationPIDSetpointStowButton.whenReleased(new ElevationPIDSetpointStow());
        elevationPIDSetpointTopButton = new JoystickButton(gameController, 4);
        elevationPIDSetpointTopButton.whenReleased(new ElevationHigherShootSetpoint());
        runShooterWheelButton = new JoystickButton(gameController, 5);
        runShooterWheelButton.whileHeld(new RunShooterWheelNoPIDCommand());
        runFeederButton = new JoystickButton(gameController, 6);
        runFeederButton.whenReleased(new FeederCommand());
        driveStick1 = new Joystick(1);
        
        reverseFrisbeeRetrievalButton = new JoystickButton(driveStick1, 1);
        reverseFrisbeeRetrievalButton.whileHeld(new runFrisbeeRetrievalReverseCommand());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveBot", new DriveBot());
        SmartDashboard.putData("ResetEncoderCommand", new ResetEncoderCommand());
        SmartDashboard.putData("AutonomousStart", new AutonomousStart());
        SmartDashboard.putData("JoystickServoRelative", new JoystickServoRelative());
        SmartDashboard.putData("FeederCommand", new FeederCommand());
        SmartDashboard.putData("runFrisbeeRetrievalCommand", new runFrisbeeRetrievalCommand());
        SmartDashboard.putData("AutonomousDriveForward", new AutonomousDriveForward());
        SmartDashboard.putData("ElevationPIDSetpointTop", new ElevationPIDSetpointTop());
        SmartDashboard.putData("ElevationPIDSetpointStow", new ElevationPIDSetpointStow());
        SmartDashboard.putData("runFrisbeeRetrievalReverseCommand", new runFrisbeeRetrievalReverseCommand());
        SmartDashboard.putData("ElevationPIDSetpointShoot", new ElevationPIDSetpointShoot());
        SmartDashboard.putData("ToggleFreeModeElevationCommand", new ToggleFreeModeElevationCommand());
        SmartDashboard.putData("RunShooterWheelNoPIDCommand", new RunShooterWheelNoPIDCommand());
        SmartDashboard.putData("CannonWheelPIDSetpoint", new CannonWheelPIDSetpoint());
        SmartDashboard.putData("AutonomousBarSetpoint", new AutonomousBarSetpoint());
        SmartDashboard.putData("ProtectedRetrievalCommand", new ProtectedRetrievalCommand());
        SmartDashboard.putData("StopCannonPID", new StopCannonPID());
        SmartDashboard.putData("SlowPyramidShotCommand", new SlowPyramidShotCommand());
        SmartDashboard.putData("AutonomousShoot", new AutonomousShoot());
        SmartDashboard.putData("ElevationHigherShootSetpoint", new ElevationHigherShootSetpoint());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick1() {
        return driveStick1;
    }
    public Joystick getgameController() {
        return gameController;
    }
    public Joystick getDriveStick2() {
        return driveStick2;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
