// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2130.MockBoard.subsystems;
import org.usfirst.frc2130.MockBoard.RobotMap;
import org.usfirst.frc2130.MockBoard.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.AnalogChannel;
//import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.*;
import org.usfirst.frc2130.MockBoard.Robot;
/**
 *
 */
public class Sensors extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder quadEncoderSensor = RobotMap.cannonWheelPIDSubsystemQuadratureEncoderForPID;
    AnalogChannel analogInputAbsolute = RobotMap.cannonElevationPIDSubsystemAnalogInputAbsolute;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    /* Distance per pulse of the quadrature encoder.
    * Math: ((39/42)(6pi))/250
    * 39/32 is the gear tooth ratio from tranny motor -> sticky wheel
    * 6pi, circumference of sticky wheel, 6 = diameter
    * 250, pulses per revolution of quadrature, /250 = .07 per pulse
    */
    public void setQuadDistPerPulse() {
        quadEncoderSensor.setDistancePerPulse(.070012636);
    }
    // Have to start the encoder to begin reading. 
    public void initQuadEncoder() {
        quadEncoderSensor.start();
    }
    // Reset. Use at init + whenever you want get() = 0
    public void resetQuadEncoder() {
        quadEncoderSensor.reset();
    }
    // Rate already incorporates the pulses per rev.
    public double getQuadEncoderRate() {
        return quadEncoderSensor.getRate();
    }
    public double getQuadEncoderDistance() {
        return quadEncoderSensor.getDistance();
    }
    public double getAbsoluteVoltage() {
        return analogInputAbsolute.getAverageVoltage();
    }
    // The absolute returns a voltage, 0 - 5, thus, any voltage *72 will = deg.
    public double getAbsoluteCurrentPosition() {
        return analogInputAbsolute.getAverageVoltage()*72;
    } 
    public double returnQuadAverageRate() {
        return quadEncoderSensor.pidGet();
    }
    public double returnCannonWheelTalonOutput() {
        return Robot.cannonWheelPIDSubsystem.cannonWheelTalon.get();
    }
}
