// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2130.MockBoard.subsystems;
import org.usfirst.frc2130.MockBoard.RobotMap;
import org.usfirst.frc2130.MockBoard.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2130.MockBoard.Robot;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder leftSideQuadratureEncoder = RobotMap.driveTrainLeftSideQuadratureEncoder;
    SpeedController leftDriveTalons = RobotMap.driveTrainLeftDriveTalons;
    PIDController leftDrivePIDController = RobotMap.driveTrainLeftDrivePIDController;
    Encoder rightSideQuadratureEncoder = RobotMap.driveTrainRightSideQuadratureEncoder;
    SpeedController rightDriveTalons = RobotMap.driveTrainRightDriveTalons;
    PIDController rightDrivePIDController = RobotMap.driveTrainRightDrivePIDController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveBot());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    // TANKDRIVE
    public void joystickDrive(Joystick driveStick1, Joystick driveStick2) {
        robotDrive.tankDrive((Robot.oi.getDriveStick1().getRawAxis(2) * -1), (Robot.oi.getDriveStick2().getRawAxis(2) * -1));
    }
    
    /* ARCADE DRIVE 
    public void joystickDrive(Joystick driveStick1) {
        robotDrive.arcadeDrive(driveStick1);
    } */
    public void motorStop() {
        robotDrive.stopMotor();
    }
    public void setBothSetpoints100() {
        leftDrivePIDController.setSetpoint(100);
        rightDrivePIDController.setSetpoint(100);
    }
    public double returnQuadRightSideRate() {
        return rightSideQuadratureEncoder.getRate();
    }
    public double returnQuadLeftSideRate() {
        return leftSideQuadratureEncoder.getRate();
    }
}
