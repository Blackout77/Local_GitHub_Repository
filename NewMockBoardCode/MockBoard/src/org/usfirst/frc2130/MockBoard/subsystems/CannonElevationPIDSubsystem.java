// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2130.MockBoard.subsystems;
import org.usfirst.frc2130.MockBoard.RobotMap;
import org.usfirst.frc2130.MockBoard.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc2130.MockBoard.Robot;
/**
 *
 */
public class CannonElevationPIDSubsystem extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel analogInputAbsolute = RobotMap.cannonElevationPIDSubsystemAnalogInputAbsolute;
    SpeedController windowMotorCannonElevation = RobotMap.cannonElevationPIDSubsystemWindowMotorCannonElevation;
    DigitalInput outsideProx = RobotMap.cannonElevationPIDSubsystemoutsideProx;
    DigitalInput insideProx = RobotMap.cannonElevationPIDSubsystemInsideProx;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    public static final double TOP = .437,
            STOW = .815,
            SHOOT = .751,
            SAFEANGLE = .797;
            
    public CannonElevationPIDSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("CannonElevationPIDSubsystem", 30.0, 0.0, 0.0);
        setAbsoluteTolerance(0.05);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("CannonElevationPIDSubsystem", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-1.0, 1.0);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        setSetpoint(STOW);
        enable();
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return analogInputAbsolute.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    public boolean outsideProxActive() {
        return !outsideProx.get();
    }
    public boolean insideProxActive() {
        return !insideProx.get();
    }
    public void setWithSaturate(double desiredOutput) {
        double limitedOutput = desiredOutput;
        if(limitedOutput < 0 && this.outsideProxActive()) {
            limitedOutput = 0;
        }
        if(limitedOutput > 0 && this.insideProxActive()) {
            limitedOutput = 0;
        }
        windowMotorCannonElevation.set(limitedOutput);
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        
        setWithSaturate(-output);
	
    }
    public void disableCannonElevationTalon() {
        windowMotorCannonElevation.disable();
    }
}
