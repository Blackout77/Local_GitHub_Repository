// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2130.MockBoard.subsystems;
import org.usfirst.frc2130.MockBoard.RobotMap;
import org.usfirst.frc2130.MockBoard.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2130.MockBoard.Robot;
/**
 *
 */
public class CameraSubsystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Servo yCameraServo = RobotMap.cameraSubsystemYCameraServo;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private double lastX = 0;
    private double lastY = 0;
	
	//For relative positioning based on joystick
	private final double scale = 0.03;
    private final double deadzone = 0.05;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new JoystickServoRelative());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    } /*
    public void setX(double pos) {
        xCameraServo.set(pos);
        lastX = pos;
    }
    */
    public void setY(double pos) {
        yCameraServo.set(pos);
        lastY = pos;
    }
    /*
    public void incrementX(double inc) {
        xCameraServo.set(lastX);
        lastX += inc;
        if(lastX>1) lastX=1;
        if(lastX<0) lastX=0;
    }
    */
    public void incrementY(double inc) {
		//Deadband the increment
        double dbnd = deadband(inc, deadzone);
        lastY += dbnd*scale;
        yCameraServo.set(lastY);
        if(lastY>1) lastY=1;
        if(lastY<0) lastY=0;
    }
	
	/**
	 * Implements a deadband around 0 for the specified value. The deadband is 
	 * smooth so that values start at 0 at the edge of the band.
	 * @param val value to deadband
	 * @param bandSize half the width of the band
	 * @return deadbanded value
	 */
	public double deadband(double val, double bandSize) {
		//Within the deadband, just return 0
		if (Math.abs(val) < bandSize) {
			return 0;
		}
		
		//Outside the deadband, subtract the band value so the deadband
		//is smooth.
		if (val >= bandSize) {
			return val - bandSize;
		} else {
			return val + bandSize;
		}
	}
    /*
    public void turnXServoPos1() {
        xCameraServo.set(1);
    }
    
    public void turnXServoPos2() {
        xCameraServo.set(2);
    }
    * */
}
